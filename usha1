# Configure the AWS Provider
provider "aws" {
  region  = "us-east-1"
}
resource "aws_instance" "server" {
  count = 4 # create four similar EC2 instances

  ami           = "ami-08f3d892de259504d"
  instance_type = "t2.micro"

  tags = {
    Name = "Server ${count.index}"
  }
}

#4 users attached to group devops with s3 policy#

provider "aws" {
    region  = "us-east-1"
}
 resource "aws_launch_template" "user" {
  name_prefix   = "user"
  image_id      = "ami-08f3d892de259504d"
  instance_type = "t2.micro"
}
resource "aws_iam_user" "devops_aws" {
  count = 4
  name = devops_user ${count.index}
}
resource "aws_iam_user_policy_attachment" "test" {
  policy_arn = "arn:aws:iam::aws:policy/AmazonS3FullAccess"
}
resource "aws_iam_group" "devops" {
name = "devops"    
}


resource "aws_iam_policy" "s3policy" {
  name        = "s3policy"
  description = "Provides full access to all buckets via the AWS Management Console."
  policy_arn = "arn:aws:iam::aws:policy/AmazonS3FullAccess"
}









#user_group _policy

provider "aws" {
    region  = "us-east-1"
}
 resource "aws_launch_template" "user" {
  name_prefix   = "user"
  image_id      = "ami-08f3d892de259504d"
  instance_type = "t2.micro"
}

resource "aws_iam_user" "deanwilson-admin" {
    name = "deanwilson-admin"
    path = "/"
}

resource "aws_iam_group" "admin-users" {
    name = "admin-users"
    path = "/"
}

resource "aws_iam_group_membership" "admin-user-membership" {
    name = "admin-user-membership"
    users = [aws_iam_user.deanwilson-admin.name]
    group = aws_iam_group.admin-users.name
}

resource "aws_iam_group_policy" "explicit-admin" {
    name = "explicit-admin"
    group = aws_iam_group.admin-users.id
    policy = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "*",
      "Effect": "Allow",
      "Resource": "*"
    }
  ]
}
EOF
}






## autoscaling group 

provider "aws" {
    region  = "us-east-1"
}
resource "aws_launch_template" "foobar" {
  name_prefix   = "foobar"
  image_id      = "ami-08f3d892de259504d"
  instance_type = "t2.micro"
}

resource "aws_autoscaling_group" "bar" {
  availability_zones = ["us-east-1a"]
  desired_capacity   = 1
  max_size           = 1
  min_size           = 1

  launch_template {
    id      = aws_launch_template.foobar.id
    version = "$Latest"
  }
}
















// Your First terraform code to get amazon linux AMI dynamically

# Configure the AWS Provider
provider "aws" {
  region  = "us-west-2"
}
#to get the ami id for the given region
data "aws_ami" "amazon-linux-2" {
  most_recent = true

 filter {
   name   = "name"
   values = ["amzn2-ami-hvm*"]
 }
  
  filter {
    name   = "root-device-type"
    values = ["ebs"]
  }

  filter {
    name   = "virtualization-type"
    values = ["hvm"]
  }

  owners = ["amazon"]

}

##
resource "aws_instance" "webTest1" {
  ami           = data.aws_ami.amazon-linux-2.id
  instance_type = "t2.micro"

  tags = {
    Name = "HelloWorld"
  }
}
