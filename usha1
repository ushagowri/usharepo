
## 1.playbook to create a group "tomcat"

---
- hosts: linuxsysadmins
  remote_user: ansible
  become: yes
  connection: ssh
  tasks:
   - name: Add group "tomcat" to remote server
     group:
       name: tomcat
       state: present
- name: Add user "tomcat" to remote server
     user:
       name: tomcat
       comment: "Privileged User"
       uid: 2o20
       group: tomcat
       append: yes
       shell: /bin/bash
       generate_ssh_key: yes
 - name: Set user password "tomcat" 
     name: tomcat
     state: present
     user: tomcat

## 2. Create a playbook to edit /etc/sudoers file and add tomcat  user to sudoers file.tomcat user
should have full sudo access with no passwd option #


- name: Add user 'tomcat' 
  user:
    name: tomcat
    state: present

- name: Allow 'tomcat' user to have passwordless sudo
  lineinfile:
    dest: /etc/sudoers
    state: present
    regexp: 'tomcat'
    line: 'tomcat ALL=(ALL) NOPASSWD: ALL'
    validate: 'visudo -cf %s'
- name: sudo without password for tomcat user to sudoers file
  copy:
    content: 'tomcat ALL=(ALL:ALL) NOPASSWD:ALL'
    dest: /etc/sudoers/tomcat_nopasswd
    mode: 0440

- name: Add sudoers file to tomcat user
  user: name=tomcat  file= sudoers append=yes state=present createhome=yes


- name: Set up authorized keys for the tomcat user
  authorized_key: user=tomcat key="{{item}}"
  
## 3. Create an variable users;test1;test2;test3. This users variable is an array.Â  Read the users
variable and create users#


- hosts: all
  vars:
    users:
      - test1
      - test2
      - test3
        
  tasks:
  - name: users list variable Example
    debug:
      msg: "{{ users [1] }}"


##4. 
- hosts: localhost
  tasks:
  - name: Ansible create file with content example
    when: ansible_distribution == "rhel"
    copy:
      dest: "/tmp/hosts"
      content: |
        {{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}
        {{ hostvars[host].ansible_host }}





##1 

- name: Setup alternate SSH port
  lineinfile:
    dest: "/etc/ssh/sshd_config"
    regexp: "^Port"
  notify: "Restart sshd"
    setype: "ssh_port_t"
    state: "present"
- name: Restart sshd
  service:
    name: sshd
    state: restarted

- name: modify  lines 
  lineinfile:
    dest: /etc/ssh/sshd_config
    



##1.Create a playbook to set the timezone to CST; modify /etc/login.def file to set MAX passwd plicy
to 90 day. Min to 7 day ; create a /etc/motd file with "welcome meassage"

---
- name: Configure the Timezone
  hosts: all
  tasks:

- name: Set timezone to 'Central Standard Time' (GMT-06:00)
  win_timezone:
    timezone: Central Standard Time
    
    - name: Update Timezone to CST
      copy: content="CST" dest=/etc/timezone owner=root group=root 
      sudo: true
      register: timezone
 
 tasks:
   - name: Set CST timezone
     timezone: name=CST
     become: yes
   
      
      
## modify /etc/login.def file to set MAX passwd plicy to 90 day. Min to 7 day#
 
 vi  /etc/login.defs
 
 PASS_MAX_DAYS 90
 PASS_MIN_DAYS 7
 
# create a /etc/motd file with "welcome meassage"
- - -
   -  hosts: ansible2 
       user: root
       vars: 
        motd_welcome: 'Welcome message'
       tasks:
       - name: sample motd
       copy:
        dest: /etc/motd
        content: "{{ motd_welcome }}"



##2. Create a playbook to install and configure ntp. Ntp service need to running and when we change
ntp.conf file ntp service need to restart.


---
- name: Install and Configure NTP
 hosts: all
 vars:
   ntp_server: [pool.ntp.org,]
 tasks:
 - name: Install NTP
   apt: name=ntp update_cache=yes
   notify: 
     - restart ntp
 handlers:
 - name: restart ntp
   service: name=ntp state=restarte
  
    - name: set up NTP configuration
      template: src=ntp.conf dest=/etc/ntp.conf
      notify:
        - restart ntp
      tags: ntp
    
    - name: Make sure NTP is started up
      service: name=ntp 
      state=started 
      enabled=yes
      tags: ntp

 


# 2Create a playbook to install and configure ntp.
---
- name: This sets up an httpd webserver
  hosts: ansibleclient01.local
  become: true
  tasks:
  - name: Install apache packages 
    yum:
      name: httpd
      state: present
  - name: ensure httpd is running
    service:
      name: httpd 
      state: started
  - name: Open port 80 for http access
    firewalld:
      service: http
      permanent: true
      state: enabled
  - name: Restart the firewalld service to load in the firewall changes
    service: 
      name: firewalld 
      state: restarted

 - name: httpd is started and enabled
      service:
        name: httpd
        state: started
        enabled: yes


















































terraform module for networking
provider "aws" {
  region  = "us-east-1"
}
# creating vpc
resource "aws_vpc" "myVPC" {
  cidr_block       = "190.160.0.0/16"
  instance_tenancy = "default"

  tags = {
    Name = "myVPC"
  }
}
#creating public subnet
resource "aws_subnet" "us-east-1a-public" {
    vpc_id = "${aws_vpc.myVPC.id}"

    cidr_block = "190.160.1.0/24"
    availability_zone = "us-east-1a"


}
#Creating private subnet#
resource "aws_subnet" "us-east-1c-private" {
    vpc_id = "${aws_vpc.myVPC.id}"

    cidr_block = "190.160.1.0/24"
    availability_zone = "us-east-1c"
}

# creating internet gateway
resource "aws_internet_gateway" "gw" {
  vpc_id = "${aws_vpc.myVPC.id}"

  tags = {
    Name = "gw"
  }
}
# --creating elastic IP
resource "aws_eip" "eip" {
  vpc = true
}
#creating route table
resource "aws_route_table" "us-east-1a-public" {
    vpc_id = "${aws_vpc.myVPC.id}"

    route {
        cidr_block = "0.0.0.0/0"

    }


}
#creating private route table
resource "aws_route_table" "us-east-1c-private" {
    vpc_id = "${aws_vpc.myVPC.id}"

    route {
        cidr_block = "0.0.0.0/0"
        
    }
     
}
























# Configure the AWS Provider
provider "aws" {
  region  = "us-east-1"
}
resource "aws_instance" "server" {
  count = 4 # create four similar EC2 instances

  ami           = "ami-08f3d892de259504d"
  instance_type = "t2.micro"

  tags = {
    Name = "Server ${count.index}"
  }
}

#4 users attached to group devops with s3 policy#

provider "aws" {
    region  = "us-east-1"
}
 resource "aws_launch_template" "user" {
  name_prefix   = "user"
  image_id      = "ami-08f3d892de259504d"
  instance_type = "t2.micro"
}
resource "aws_iam_user" "devops_aws" {
  count = 4
  name = devops_user ${count.index}
}
resource "aws_iam_user_policy_attachment" "test" {
  policy_arn = "arn:aws:iam::aws:policy/AmazonS3FullAccess"
}
resource "aws_iam_group" "devops" {
name = "devops"    
}


resource "aws_iam_policy" "s3policy" {
  name        = "s3policy"
  description = "Provides full access to all buckets via the AWS Management Console."
  policy_arn = "arn:aws:iam::aws:policy/AmazonS3FullAccess"
}









#user_group _policy

provider "aws" {
    region  = "us-east-1"
}
 resource "aws_launch_template" "user" {
  name_prefix   = "user"
  image_id      = "ami-08f3d892de259504d"
  instance_type = "t2.micro"
}

resource "aws_iam_user" "deanwilson-admin" {
    name = "deanwilson-admin"
    path = "/"
}

resource "aws_iam_group" "admin-users" {
    name = "admin-users"
    path = "/"
}

resource "aws_iam_group_membership" "admin-user-membership" {
    name = "admin-user-membership"
    users = [aws_iam_user.deanwilson-admin.name]
    group = aws_iam_group.admin-users.name
}

resource "aws_iam_group_policy" "explicit-admin" {
    name = "explicit-admin"
    group = aws_iam_group.admin-users.id
    policy = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "*",
      "Effect": "Allow",
      "Resource": "*"
    }
  ]
}
EOF
}






## autoscaling group 

provider "aws" {
    region  = "us-east-1"
}
resource "aws_launch_template" "foobar" {
  name_prefix   = "foobar"
  image_id      = "ami-08f3d892de259504d"
  instance_type = "t2.micro"
}

resource "aws_autoscaling_group" "bar" {
  availability_zones = ["us-east-1a"]
  desired_capacity   = 1
  max_size           = 1
  min_size           = 1

  launch_template {
    id      = aws_launch_template.foobar.id
    version = "$Latest"
  }
}
















// Your First terraform code to get amazon linux AMI dynamically

# Configure the AWS Provider
provider "aws" {
  region  = "us-west-2"
}
#to get the ami id for the given region
data "aws_ami" "amazon-linux-2" {
  most_recent = true

 filter {
   name   = "name"
   values = ["amzn2-ami-hvm*"]
 }
  
  filter {
    name   = "root-device-type"
    values = ["ebs"]
  }

  filter {
    name   = "virtualization-type"
    values = ["hvm"]
  }

  owners = ["amazon"]

}

##
resource "aws_instance" "webTest1" {
  ami           = data.aws_ami.amazon-linux-2.id
  instance_type = "t2.micro"

  tags = {
    Name = "HelloWorld"
  }
}
